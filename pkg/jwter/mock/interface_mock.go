// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/jwter/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	models "quizapp/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJWTer is a mock of JWTer interface.
type MockJWTer struct {
	ctrl     *gomock.Controller
	recorder *MockJWTerMockRecorder
}

// MockJWTerMockRecorder is the mock recorder for MockJWTer.
type MockJWTerMockRecorder struct {
	mock *MockJWTer
}

// NewMockJWTer creates a new mock instance.
func NewMockJWTer(ctrl *gomock.Controller) *MockJWTer {
	mock := &MockJWTer{ctrl: ctrl}
	mock.recorder = &MockJWTerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTer) EXPECT() *MockJWTerMockRecorder {
	return m.recorder
}

// GenerateJWTToken mocks base method.
func (m *MockJWTer) GenerateJWTToken(user *models.User) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWTToken", user)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWTToken indicates an expected call of GenerateJWTToken.
func (mr *MockJWTerMockRecorder) GenerateJWTToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWTToken", reflect.TypeOf((*MockJWTer)(nil).GenerateJWTToken), user)
}

// ParseToken mocks base method.
func (m *MockJWTer) ParseToken(access_token string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", access_token)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockJWTerMockRecorder) ParseToken(access_token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockJWTer)(nil).ParseToken), access_token)
}
